syntax = "proto3";
option go_package = "{{ .ModuleName }}";
package {{ .Name }};

import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

option(grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
	info: {
		title: "assets repo";
version: "1.0";
contact: {
name: "derek";
url: "https://github.com/fghosth";
email: "fanhua@163.com";
};
license: {
name: "BSD 3-Clause License";
url: "https://github.com/XXXXX/LICENSE.txt";
};
};
host: "localhost:4000";
// Overwriting host entry breaks tests, so this is not done here.
external_docs: {
url: "";
description: "错误编码";
}
schemes: HTTP;
schemes: HTTPS;
consumes: "application/json";
consumes: "application/x-foo-mime";
produces: "application/json";
produces: "application/x-foo-mime";
security_definitions: {
security: {
key: "BasicAuth";
value: {
type: TYPE_BASIC;
}
}
security: {
key: "ApiKeyAuth";
value: {
type: TYPE_API_KEY; in: IN_HEADER;
name: "X-API-Key";
extensions: {
key: "x-amazon-apigateway-authtype";
value {
string_value: "oauth2";
}
}
extensions: {
key: "x-amazon-apigateway-authorizer";
value {
struct_value {
fields {
key: "type";
value {
string_value: "token";
}
}
fields {
key: "authorizerResultTtlInSeconds";
value {
number_value: 60;
}
}
}
}
}
}
}
security: {
key: "OAuth2";
value: {
type: TYPE_OAUTH2;
flow: FLOW_ACCESS_CODE;
authorization_url: "https://example.com/oauth/authorize";
token_url: "https://example.com/oauth/token";
scopes: {
scope: {
key: "read";
value: "Grants read access";
}
scope: {
key: "write";
value: "Grants write access";
}
scope: {
key: "admin";
value: "Grants read and write access to administrative information";
}
}
}
}
}
security: {
security_requirement: {
key: "BasicAuth";
value: {};
}
security_requirement: {
key: "ApiKeyAuth";
value: {};
}
}
security: {
security_requirement: {
key: "OAuth2";
value: {
scope: "read";
scope: "write";
}
}
security_requirement: {
key: "ApiKeyAuth";
value: {};
}
}
responses: {
key: "403";
value: {
description: "Returned when the user does not have permission to access the resource.";
}
}
responses: {
key: "404";
value: {
description: "Returned when the resource does not exist.";
schema: {
json_schema: {
type: STRING;
}
}
}
}

extensions: {
key: "x-grpc-gateway-baz-list";
value {
list_value: {
values: {
string_value: "one";
}
values: {
bool_value: true;
}
}
}
}
};


// 定义Hello服务
service {{ .CamelCaseName }} {

  // 定义healthcheck方法
   rpc Healthcheck(HealthcheckRequest) returns (HealthcheckReply) {
     // http option
     option (google.api.http) = {
       get: "/healthcheck"
     };
   }
}

// healthcheck 请求结构
message HealthcheckRequest {
}
// healthcheck 响应结构
message HealthcheckReply {
  string message = 1;
}